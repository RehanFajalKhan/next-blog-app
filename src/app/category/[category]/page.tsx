import ArticleList from "@/components/ArticleList";
import Pagination from "@/components/Pagination";
import Tabs from "@/components/Tabs";
import { fetchArticles, fetchCategories } from "@/http";
import { capitalizeFirstLetter, makeCategory } from "@/utils";
import { Metadata } from "next";
import qs from "qs";

export const metadata: Metadata = {
  title: "",
  description: "Generated by create next app",
};

const category = async ({
  params,
  searchParams,
}: {
  params: { category: string };
  searchParams: { [key: string]: string | string[] | undefined };
}) => {
  metadata.title = `Coder's Blog ${capitalizeFirstLetter(
    makeCategory(params.category)
  )}`;

  const options: Partial<IQueryOptions> = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        Slug: params.category,
      },
    },
    pagination: {
      page: searchParams.page ? +searchParams.page : 1,
      pageSize: 1,
    },
  };
  if (searchParams.search) {
    options.filters = {
      ...options.filters,
      Title: {
        $containsi: searchParams.search,
      },
      
    };
  }

  const queryString = qs.stringify(options);

  const resArticles: Promise<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString);
  const {
    data: articles,
    meta: {
      pagination: { page, pageCount },
    },
  } = await resArticles;

  // Categories
  const resCategories: Promise<ICollectionResponse<ICategory[]>> =
    await fetchCategories();
  const { data: categories } = await resCategories;

  return (
    <>
      <Tabs categories={categories} />
      <ArticleList articles={articles} />
      <Pagination page={page} pageCount={pageCount} />
    </>
  );
};

export default category;
